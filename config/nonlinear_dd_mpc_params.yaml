# Nonlinear Data-Driven MPC Parameters

nonlinear_dd_mpc_ext_out_incr_in:
  n: 2  # Estimated system order

  N: 350  # Initial input-output trajectory length
  L: 25  # Prediction horizon

  # Weighting matrices
  Q_weights: 10  # Output weighting matrix Q weights
  R_weights: 5.0e-2  # Input weighting matrix R weights
  S_weights: 100  # Output setpoint weighting matrix S weights

  lambda_alpha: 100  # Regularization parameter for alpha
  lambda_sigma: 1.0e8  # Regularization parameter for sigma

  # Bounds for the predicted input
  U:
    - [-1.732, 1.732]
    - [-1.732, 1.732]
    - [-1.732, 1.732]

  # Bounds for the predicted input setpoint (must be a subset of U)
  Us:
    - [-1.731, 1.731]
    - [-1.731, 1.731]
    - [-1.731, 1.731]

  # Range of the persistently exciting input u
  u_range:
    - [-1, 1]
    - [-1, 1]
    - [-1, 1]

  alpha_reg_type: 1  # Alpha regularization type:
                     # - 0 = Approximated → Regularized w.r.t. an approximation
                     #                      of alpha_Lin^sr(D_t).
                     # - 1 = Previous → Regularized w.r.t. a previous optimal
                     #                  alpha value to encourage stationary
                     #                  behavior.
                     # - 2 = Zero → Regularized w.r.t. zero.
  
  # Nonlinear MPC parameters for alpha_reg_type = 0 (Approximated)
  lamb_alpha_s: null  #  Regularization parameter for alpha_s (optional)
  lamb_sigma_s: null  #  Regularization parameter for sigma_s (optional)
  
  y_r: [1.0, 1.0, 1.0]  # System output setpoint

  ext_out_incr_in: true  # Enables the following controller structure:
                         # - true → Controller uses an extended output
                         #          representation (y_ext[k] = [y[k], u[k]])
                         #          and input increments where the control
                         #          input is updated incrementally as:
                         #          u[k] = u[k-1] + du[k-1].
                         # - false → Standard controller operation. Direct
                         #           control input, without extensions.

  # Tracking cost value threshold
  update_cost_threshold: null

  n_n_mpc_step: true  # Enable n-Step Data-Driven MPC:
                      # - true = n-Step Data-Driven MPC
                      # - false = 1-Step Data-Driven MPC

nonlinear_dd_mpc_approx_1_step:
  n: 2  # Estimated system order

  N: 350  # Initial input-output trajectory length
  L: 30  # Prediction horizon

  # Weighting matrices
  Q_weights: 10  # Output weighting matrix Q weights
  R_weights: 5.0e-2  # Input weighting matrix R weights
  S_weights: 100  # Output setpoint weighting matrix S weights

  lambda_alpha: 100  # Regularization parameter for alpha
  lambda_sigma: 1.0e8  # Regularization parameter for sigma

  # Bounds for the predicted input
  U:
    - [-1, 1]
    - [-1, 1]
    - [-1, 1]
    - [-1, 1]

  # Bounds for the predicted input setpoint (must be a subset of U)
  Us:
    - [-0.999, 0.999]
    - [-0.999, 0.999]
    - [-0.999, 0.999]
    - [-0.999, 0.999]

  # Range of the persistently exciting input u
  u_range:
    - [-0.01, 0.01]
    - [-0.01, 0.01]
    - [-0.01, 0.01]
    - [-0.01, 0.01]

  alpha_reg_type: 1  # Alpha regularization type:
                     # - 0 = Approximated → Regularized w.r.t. an approximation
                     #                      of alpha_Lin^sr(D_t).
                     # - 1 = Previous → Regularized w.r.t. a previous optimal
                     #                  alpha value to encourage stationary
                     #                  behavior.
                     # - 2 = Zero → Regularized w.r.t. zero.
  
  # Nonlinear MPC parameters for alpha_reg_type = 0 (Approximated)
  lamb_alpha_s: 1  #  Regularization parameter for alpha_s (optional)
  lamb_sigma_s: 1.0e5  #  Regularization parameter for sigma_s (optional)
  
  y_r: [1.0, 1.0, 1.0]  # System output setpoint

  ext_out_incr_in: false  # Enables the following controller structure:
                          # - true → Controller uses an extended output
                          #          representation (y_ext[k] = [y[k], u[k]])
                          #          and input increments where the control
                          #          input is updated incrementally as:
                          #          u[k] = u[k-1] + du[k-1].
                          # - false → Standard controller operation. Direct
                          #           control input, without extensions.

  # Tracking cost value threshold
  update_cost_threshold: null

  n_n_mpc_step: false # Enable n-Step Data-Driven MPC:
                      # - true = n-Step Data-Driven MPC
                      # - false = 1-Step Data-Driven MPC
